// Generated by CoffeeScript 1.8.0
(function() {
  var __slice = [].slice;

  $.log = console.log;

  $.info = function() {
    var arr, c, p, text, type, _ref;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _ref = p[1] != null ? [p[0], p[1]] : ['default', p[0]], type = _ref[0], text = _ref[1];
    text = $.parseString(text);
    arr = text.split('::');
    if (arr.length > 1) {
      type = arr[0];
      text = arr.slice(1).join('::');
    }
    if (type === 'debug' && !$.debug) {
      return;
    }
    c = require('colors/safe');
    text = (function() {
      switch (type) {
        case 'fatal':
          return c.white.bgRed('[fatal]') + ' ' + c.white.bgRed(text);
        case 'error':
          return c.red('[error]') + ' ' + c.red(text);
        case 'warn':
        case 'warning':
          return c.yellow('[warn]') + ' ' + c.yellow(text);
        case 'success':
          return c.green('[success]') + ' ' + c.green(text);
        case 'info':
          return c.cyan('[info]') + ' ' + text;
        case 'debug':
          return c.magenta('[debug]') + ' ' + c.magenta(text);
        default:
          return text;
      }
    })();
    return $.log(c.grey($.timeString()) + ' ' + text);
  };

  $.i = function(text) {
    if ($.debug) {
      return $.info('debug', $.parseString(text));
    }
  };

  $.timeStamp = function(param) {
    var a, b, c, d, i, p, text, _i;
    switch ($.type(p = param)) {
      case 'number':
        return p;
      case 'string':
        text = p;
        if (text.search(/[\s\.\-\/]/) !== -1) {
          if (text.search(/\:/) !== -1) {
            a = text.split(' ');
            if (a[0].search(/\:/) === -1) {
              b = a[0].replace(/[\-\/]/g, '.').split('.');
              c = a[1].split(':');
            } else {
              b = a[1].replace(/[\-\/]/g, '.').split('.');
              c = a[0].split(':');
            }
          } else {
            b = text.replace(/[\-\/]/g, '.').split('.');
            c = [0, 0, 0];
          }
          for (i = _i = 0; _i <= 2; i = ++_i) {
            b[i] = b[i] | 0;
            c[i] = (c[i] || 0) | 0;
          }
          d = new Date();
          d.setFullYear(b[0], b[1] - 1, b[2]);
          d.setHours(c[0], c[1], c[2]);
          return ((d.getTime() / 1e3) | 0) * 1e3;
        } else {
          return $.now();
        }
        break;
      default:
        return $.now();
    }
  };

  $.delay = function() {
    var c, f, func, now, param, _base, _name;
    param = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    func = {
      delay: 200
    };
    switch (param.length) {
      case 1:
        $.extend(func, param[0]);
        func.name = '$.fn.info()';
        break;
      case 2:
        func.id = param[0].toString();
        func.callback = param[1];
        break;
      case 3:
        func.id = param[0].toString();
        func.delay = param[1] | 0;
        func.callback = param[2];
    }
    if (func.id && func.delay >= 0 && func.callback) {
      c = (_base = $.delay).cache != null ? _base.cache : _base.cache = {};
      if (c[_name = func.id] == null) {
        c[_name] = {
          time: 0,
          timer: null
        };
      }
      now = $.now();
      f = function() {
        c[func.id].time = now;
        return typeof func.callback === "function" ? func.callback() : void 0;
      };
      if (now - c[func.id].time > func.delay) {
        return f();
      } else {
        clearTimeout(c[func.id].timer);
        return c[func.id].timer = setTimeout(f, func.delay);
      }
    }
  };

  $.rnd = function() {
    var p, r;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    r = Math.random();
    switch (p.length) {
      case 1:
        switch ($.type(p[0])) {
          case 'number':
            return (r * p[0]) | 0;
          case 'array':
            return p[0][(r * p[0].length) | 0];
        }
        break;
      case 2:
        return (p[0] + r * (p[1] - p[0])) | 0;
      default:
        return (r * 2) | 0;
    }
  };

  $.mid = function() {
    return Math.random().toString(36).substring(2);
  };

  $.timeString = function(time) {
    var arr, d, f;
    d = time ? new Date(time) : new Date();
    f = function(n) {
      if (n < 10) {
        return '0' + n;
      } else {
        return n;
      }
    };
    arr = [f(d.getHours()), f(d.getMinutes()), f(d.getSeconds())];
    return arr.join(':');
  };

}).call(this);
