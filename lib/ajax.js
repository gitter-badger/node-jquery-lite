// Generated by CoffeeScript 1.8.0
(function() {
  var __slice = [].slice;

  $.get = function() {
    var cache, def, f, http, p, param, url;
    param = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    http = require('http');
    cache = $.cache;
    p = param;
    url = p[0] + (p[1] ? '?' + $.param(p[1]) : '');
    f = function() {
      var req;
      req = http.get(url, function(res) {
        var data, len;
        data = [];
        len = 0;
        return res.on('data', function(chunk) {
          data.push(chunk);
          return len += chunk.length;
        }).on('end', function() {
          data = Buffer.concat(data, len).toString();
          return def.resolve(data, function(time) {
            if (time == null) {
              time = 900;
            }
            if (cache && time) {
              return cache.set(url, data, time);
            }
          });
        });
      });
      return req.on('error', function(err) {
        return def.reject(err);
      });
    };
    if (cache) {
      cache.get(url, function(cd) {
        if (cd) {
          return def.resolve(cd, function() {});
        } else {
          return f();
        }
      });
    } else {
      f();
    }
    return def = new $.Deferred();
  };

  $.post = function() {
    var buffer, def, href, http, p, param, req;
    param = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    http = require('http');
    p = param;
    href = (function() {
      var a, arr, b, c, d, i;
      arr = p[0].toString().split('//');
      a = arr[0];
      i = arr[1].indexOf('/');
      if (i < 0) {
        i = arr[1].length;
      }
      b = arr[1].slice(0, i);
      c = arr[1].slice(i) || '/';
      b = b.split(':');
      d = b[1] || 80;
      b = b[0];
      return [a, b, c, d];
    })();
    buffer = $.param(p[1]);
    req = http.request({
      host: href[1],
      port: href[3],
      method: 'POST',
      path: href[2],
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      }
    }, function(res) {
      var data;
      data = '';
      return res.on('data', function(chunk) {
        data.push(chunk);
        return len += chunk.length;
      }).on('end', function() {
        data = Buffer.concat(data, len).toString();
        return def.resolve(data);
      });
    });
    req.write(buffer);
    req.end();
    req.on('error', function(err) {
      return def.reject(err);
    });
    return def = new $.Deferred();
  };

}).call(this);
